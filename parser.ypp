%{
    #include "hw3_output.hpp"
    
    #include <iostream>
    #include <cstring>
    #include "symbol_tables_stack.hpp"
    #include "register.hpp"
    #include "bp.hpp"
    #include "parser_helper.hpp"

    #define VAR_EMPTY_STR "EMPTY"
    
    extern int yylineno;
    int yylex();
    void yyerror( const char* s);
    
    using namespace output;

    symbol_tables_stack _stack = symbol_tables_stack();
    bool notBool( string type);
    bool byteTooLarge(int value);
    bool typesDontMatch( string LHS_type,  string RHS_type);
    bool notIntOrByte( string converter_type,  string converted_type);
    bool can_type_be_compared(string t1,string t2);
    bool expList_not_valid(string func_name, string exp_list);
    bool isVoid();
    string biggerType(string first, string second);
    string join(string s1,string s2);


//TODO:ADD SOME OF THE FUNCTIONS BELOW
/*
    bool notLastBool(vector<string>::iterator it, vector<string>::iterator end);
*/


    
%}
%define parse.error verbose;

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc OVERRIDE;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;

%token V;
%token ERROR;
%nonassoc IF;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID; 
%nonassoc NUM;    
%nonassoc STRING;

%right ASSIGN;

%left OR;
%left AND;


%left EQ_RELOP;
%left RE_RELOP;
%left PM_BINOP;
%left MD_BINOP;

%right NOT;
%left LPAREN;
%left RPAREN;
%nonassoc ELSE;

%%
Program
    : {initDeclarations();
    }
    Funcs {
        $$ = new token_att();
        if (yychar == YYEOF) {
            _stack.validateMainFunction(yylineno);
            _stack.pop_scope();
            printGlobalAndCodeBuffer();
        }   
    }
    ;

Funcs
    : FuncDecl Funcs {
        $$ = new token_att();

        /*empty*/}
    |/*epsilon*/ {/*empty*/}
    ;

FuncDecl
    : OverRide RetType ID LPAREN Formals
    {
        string llvm_name = rgs.freshVar($3->name,true); 
        _stack.insert($3->name, $5->type+"->"+$2->type,llvm_name, true, $1->intVal, yylineno);
        declareFunction(/*is_override =*/ $1->intVal,
                        /*func_name=*/ $3->name,
                        /*func_arguments_type_string=*/ $5->type,
                        /*func_arguments_type_string=*/ $5->name,
                        /*fresh_func_name*/ llvm_name,
                        /*func_type*/ $2->type); 
    }
    RPAREN LBRACE 
    {_stack.push_scope();_stack.symbol_table_add_function_parameter_entries($5->name, $5->type, yylineno);} 
    Statements RBRACE 
    {
        $$ = new token_att();
        _stack.pop_scope();
        closeFunction(/*nextlist=*/$10->nextList, /*func_return_type=*/  $2->type);
    }
    ;
OverRide
    :/*epsilon*/ {$$ = new token_att();$$->intVal = false;}
    | OVERRIDE {$$ = new token_att();$$->intVal = true;}
    ;

RetType
    : VOID { $$ = new token_att();$$->type=$1->type; } 
    | Type { $$ = new token_att();$$->type=$1->type; }
    ;

Formals
    : /*epsilon*/ {$$ = new token_att();$$->type = ""; $$->name = "";  }
    |FormalsList { $$ = new token_att();$$->type = $1->type; $$->name = $1->name;}
    ;

FormalsList
    : FormalDecl {$$ = new token_att();$$->type = $1->type; $$->name = $1->name;}
    | FormalDecl COMMA FormalsList {$$ = new token_att();$$->type = $1->type +","+$3->type;
                                    $$->name = $1->name +","+ $3->name;}
    ;
FormalDecl
    : Type ID { $$ = new token_att();$$->type = $1->type ; $$->name = $2->name; }
    ;

Statements
    : Statement 
    {$$ = new token_att();
        $$->nextList = $1->nextList;
        $$->breakList = $1->breakList;
        $$->contList = $1->contList;
        }
    | Statements 
      { $$ = new token_att();
        bpVector($1->nextList);
      } 
     Statement 
        {
        $$->nextList = $3->nextList; 
        $$->breakList = cbf.merge($1->breakList, $3->breakList);
        $$->contList = cbf.merge($1->contList, $3->contList);
        }
    ;
Statement 
    : LBRACE {_stack.push_scope();} Statements RBRACE 
    {
        $$ = new token_att();
        _stack.pop_scope();
        $$->nextList = $3->nextList;
        $$->breakList = $3->breakList;
        $$->contList = $3->contList;
    }
    | Type ID SC {$$ = new token_att(); 
        $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
        $$->startLabel = cbf.genLabel("start_type_id_sc");
        cbf.bpatch($$->jumpList, $$->startLabel);
        string llvm_name = rgs.freshVar(string($2->name),false);
        $$->llvm_name = llvm_name;
        $$->name = $2->name;
        _stack.insert($2->name , $1->type, llvm_name, false, false, yylineno);
        $2->type=$1->type;
        varDefintionGenerate(/*varType*/string($1->type),/*var_name*/llvm_name); 
        }
    | Type ID ASSIGN Exp SC 
    {   
        $$ = new token_att();
        if(typesDontMatch($1->type, $4->type)) 
        {
            errorMismatch(yylineno);
        }
        resolve_jump_to_next_line($4);
        $$->llvm_name = rgs.freshVar(string($2->name),false);
        $$->name = $2->name;
        $2->type=$1->type;
         _stack.insert($2->name , $2->type, $$->llvm_name, false, false, yylineno);     
        string exp_llvm_name = $4->llvm_name;
        varDefintionAndAssignmentGenerate(/*llvm_var*/$$->llvm_name,
                             /*number value*/exp_llvm_name,
                             /*exp_type*/string($4->type),   
                             /*exp_true_list*/$4->trueList,
                             /*exp_false_list*/$4->falseList,
                             true);   
    }
    | ID ASSIGN {
        if(!_stack.nameExists($1->name) || _stack.isFunc($1->name)) errorUndef(yylineno, $1->name);
        } 
        Exp SC { 
            $$ = new token_att();
            $$->name = $1->name;
            resolve_jump_to_next_line($4);
            if(typesDontMatch(_stack.getType($1->name), $4->type)) {errorMismatch(yylineno);}
            string llvm_name = _stack.getLlvmName(string($1->name));
            string exp_llvm_name = $4->llvm_name;
            varDefintionAndAssignmentGenerate(/*llvm_var*/llvm_name,
                                /*number value*/exp_llvm_name,
                                /*exp_type*/string($4->type),   
                                /*exp_true_list*/$4->trueList,
                                /*exp_false_list*/$4->falseList,
                                false);//,
                               
        }
    | Call SC {
      $$ = new token_att();
      //$$->label = $1->label;
      $$->type = $1->type;
      $$->llvm_name = rgs.freshVar("llvm_name_reg_call_sc_return_sc");
      resolve_jump_to_next_line($1);
      cbf.emit($1->label);
       }
    | RETURN SC { $$ = new token_att();
        if(!isVoid()||_stack.getCurrentfunctionreturnType()!="VOID") errorMismatch(yylineno); 
        cbf.emit("ret void");
        }
    | RETURN Exp SC {$$ = new token_att();
        
        if(isVoid()||!_stack.is_desired_return_type(string($2->type),_stack.getCurrentfunctionreturnType(),false)) {
            errorMismatch(yylineno);
            }
        resolve_jump_to_next_line($2);
        if($2->type == "BOOL")
        {
            $2->llvm_name = rgs.freshVar("bool_var");
            emitBool($2->llvm_name, $2->trueList, $2->falseList);
        }
        string return_reg = $2->llvm_name;

        cbf.emit("ret i32 " + return_reg);
        }
    | IF NEW_SCOPE_MARKER LPAREN CHECK_TYPE_MARKER RPAREN Statement POP_SCOPE_MARKER
    {
        $$ = new token_att();      
        $$->nextList = cbf.merge($4->falseList, $6->nextList);
        $$->nextList = cbf.merge($$->nextList,  $7->nextList);
        $$->breakList = $6->breakList;
        $$->contList =  $6->contList; 
        }
    | IF NEW_SCOPE_MARKER LPAREN CHECK_TYPE_MARKER RPAREN  Statement  POP_SCOPE_MARKER ELSE 
    {
        $$ = new token_att();
        _stack.push_scope();
        $$->nextList = $7->nextList;
        string label = cbf.genLabel();
        cbf.bpatch($4->falseList, label);
    }    Statement 
    {   
        _stack.pop_scope();         
        $$ = new token_att();
        int line = cbf.emit("br label @");
        auto temp = cbf.merge(cbf.makelist({line, FIRST}), $6->nextList);
        temp = cbf.merge(temp, $9->nextList);
        $$->nextList = cbf.merge(temp, $10->nextList);
        $$->breakList = cbf.merge($6->breakList, $10->breakList);
        $$->contList = cbf.merge( $6->contList, $10->contList);
    }   
    
    
    | WHILE 
    {
        $$ =  new token_att();
        _stack.push_scope();_stack.updateInWhile(true);
        int line = cbf.emit("br label @");
        $$->label = cbf.genLabel();
        cbf.bpatch(cbf.makelist({line, FIRST}), $$->label);

    } 
    LPAREN Exp 
    { 
        //syntactic sugar, $$ is not the real $$

        $$ = new token_att();
        if(notBool($4->type)) errorMismatch(yylineno);
        resolve_jump_to_next_line($4);
        $$->label = cbf.genLabel();
        cbf.bpatch($4->trueList, $$->label);

    } 
    RPAREN  Statement 
    {            
        _stack.updateInWhile(false);
        _stack.pop_scope();
        $$ = new token_att();
        cbf.bpatch($7->contList, $2->label);
        cbf.bpatch($7->nextList, $2->label);
        $$->nextList = cbf.merge($4->falseList, $7->breakList);
        cbf.emit("br label %" + $2->label);
    }
    | BREAK SC 
    {             
        if(!_stack.inWhileLoop()) errorUnexpectedBreak(yylineno);
        $$ = new token_att();
        int line = cbf.emit("br label @");
        $$->breakList = cbf.makelist({line, FIRST});
    }
    | CONTINUE SC {             
        

        if(!_stack.inWhileLoop()) errorUnexpectedContinue(yylineno);
        $$ = new token_att();
        int line = cbf.emit("br label @");
        $$->contList = cbf.makelist({line, FIRST});
        }
    ;
Call
    : ID LPAREN ExpList RPAREN {            
        $$ = new token_att();
        _stack.validateCall(string($1->name), string($3->type), yylineno);
        vector<string> labels_vec = parseString($3->startLabel);
        $$->startLabel = labels_vec.at(0);
        $$->jumpList = $3->jumpList;
        $$->name = $1->name;
        string expList_type = string($3->type); 
        $$->type = _stack.getFuncReturnType(string($1->name),expList_type);
        $$->llvm_name = _stack.getFunctionLlvmName(string($1->name), expList_type);
        $$->label = funcCall(/*function return type*/string($$->type),
                      /*function parameter types*/string($3->type),
                      /*function parameter llvm_names*/string($3->llvm_name),
                      /*truelist_list*/$3->trueListList,
                      /*falselist_list*/$3->falseListList,
                      string($$->llvm_name),
                      /*labels_vec*/labels_vec
                      );
    }
    | ID LPAREN RPAREN 
    { 
        //todo understand
        $$ = new token_att();
        _stack.validateCall(string($1->name), "",yylineno);
        $$->name = $1->name;
        $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
        $$->startLabel = cbf.genLabel("start_label_id_l_r");    
        $$->type = _stack.getFuncReturnType($1->name,"");       
        string str_name = _stack.getFunctionLlvmName(string($1->name),"");
        string call_str = "call " + convertToLLVMType(string($$->type))+" "+str_name + "()";
        $$->label = string(call_str);
        $$->llvm_name = str_name;
    }
    ;
NEW_SCOPE_MARKER 
    : /*epsilon*/{
        $$ = new token_att();_stack.push_scope();}
    ;
POP_SCOPE_MARKER
    : /*epsilon*/ 
    {
        $$ = new token_att();
        _stack.pop_scope();
        int line = cbf.emit("br label @");
        $$->nextList = cbf.makelist({line, FIRST});
    }
    ;
CHECK_TYPE_MARKER
    : Exp {
        
        if(notBool($1->type)) {
            errorMismatch(yylineno);}
        $$ = new token_att();
        resolve_jump_to_next_line($1);
        int line = cbf.emit("br label @");
        string label = cbf.genLabel("check_type_marker");
        cbf.bpatch(cbf.makelist({line, FIRST}), label);
        cbf.bpatch($1->trueList, label);
        $$->falseList = $1->falseList;
        $$->trueList = $1->trueList;
        }
    ;
ExpList
    : Exp 
    { 
    $$ = new token_att();
    $$->type = $1->type;
    string reg = $1->llvm_name;
     if(($1->startLabel).length() == 0){
        $1->startLabel = " ";
     }
    $$->jumpList = $1->jumpList;
    $$->startLabel = $1->startLabel;
    $$->llvm_name = reg;
    //TODO: understand
    ($$->trueListList).push_back($1->trueList); 
    ($$->falseListList).push_back($1->falseList);
    }
    | Exp COMMA ExpList 
    {
        $$ = new token_att();
        resolve_jump_to_next_line($3);
        //TODO: ADD and Understand
        $$->type = $1->type+ "," + $3->type;
        string reg = $1->llvm_name;
        if(($1->startLabel).length() == 0)
        {
            $1->startLabel = " ";
        }
        $$->jumpList = $1->jumpList;
        $$->startLabel = $1->startLabel + "," + $3->startLabel;
        $$->llvm_name = $1->llvm_name + "," + $3->llvm_name;
        ($3->trueListList).insert(($3->trueListList).begin(), $1->trueList);
        $$->trueListList = $3->trueListList;
        ($3->falseListList).insert(($3->falseListList).begin(), $1->falseList);
        $$->falseListList = $3->falseListList;
    }
    ;

Type
    : INT {$$ = new token_att(); $$->type = $1->type; }
    | BYTE {$$ = new token_att(); $$->type = $1->type; }
    | BOOL {$$ = new token_att(); $$->type = $1->type; }
    ;
Exp
    : LPAREN Exp RPAREN {$$ = new token_att();
        $$->falseList = $2->falseList;
        $$->llvm_name = $2->llvm_name;
        $$->trueList = $2->trueList;
        $$->type = $2->type;
        $$->label = $2->label;
        $$->jumpList = $2->jumpList;
        $$->startLabel = $2->startLabel;
        }
    | Exp MD_BINOP Exp %prec MD_BINOP {

         if(notIntOrByte($1->type,$3->type)) errorMismatch(yylineno);
         $$ = new token_att();
         resolve_jump_to_next_line($3);
            $$->jumpList = $1->jumpList;
            $$->startLabel = $1->startLabel;
            $$->type = biggerType($1->type, $3->type);
            $$->llvm_name = rgs.freshVar("md_binop_reg");
            string reg1 = $1->llvm_name;
            string reg2 = $3->llvm_name;
            validateBinop(string($2->name), reg2);
            cbf.emit($$->llvm_name + " = " + opcode_to_cmd(string($2->name), string($$->type)) + " i32 " + reg1 + ", " + reg2);
            if($$->type=="BYTE")
            {
                string new_var = rgs.freshVar("second_exp_md_binop_reg");
                cbf.emit(new_var + " = and i32 "+ $$->llvm_name +", 255");
                $$->llvm_name = new_var;
            }
            
          }
    | Exp PM_BINOP Exp %prec PM_BINOP {$$ = new token_att();

         if(notIntOrByte($1->type,$3->type)) errorMismatch(yylineno); $$->type = biggerType($1->type, $3->type);
            resolve_jump_to_next_line($3);
            $$->llvm_name = rgs.freshVar("pm_binop_reg");
            $$->type = biggerType($1->type, $3->type);
            $$->jumpList = $1->jumpList;
            $$->startLabel = $1->startLabel;
            string reg1 = $1->llvm_name;
            string reg2 = $3->llvm_name;
            cbf.emit($$->llvm_name + " = " + opcode_to_cmd(string($2->name), string($$->type)) + " i32 " + reg1 + ", " + reg2);
            if($$->type=="BYTE")
            {
                string new_reg = rgs.freshVar("byte_conv_reg");
                cbf.emit(new_reg + " = and i32 "+ $$->llvm_name +", 255");
                $$->llvm_name = new_reg;
            }
        }
    | ID {$$ = new token_att();
        _stack.validateId(string($1->name),yylineno); 
        $$->type = _stack.getType(string($1->name));
        string curr_llvm_name = _stack.getLlvmName(string($1->name));
         $$->llvm_name = rgs.freshVar("id_reg");
         $$->jumpList =   cbf.makelist({cbf.emit("br label @"), FIRST});
         $$->startLabel = cbf.genLabel("id_start");        

        cbf.emit($$->llvm_name + " = load i32, i32* " + curr_llvm_name );
           //TODO: check if correct
        if($$->type== "BOOL")
            {
                string compare_reg = rgs.freshVar("cmp_reg");
                cbf.emit(compare_reg + " = icmp eq i32 1, " + $$->llvm_name);
                int line = cbf.emit("br i1 " + compare_reg + ", label @, label @");
                $$->trueList = cbf.makelist({line, FIRST});
                $$->falseList = cbf.makelist({line, SECOND});
            }
        }
    | Call {
        $$ = new token_att();
        $$->label = string($1->label);
        $$->name = $1->name; 
        $$->type = $1->type;
        $$->jumpList = $1->jumpList;
        $$->startLabel = $1->startLabel;
        $$->llvm_name = rgs.freshVar("llvm_name_call");
        cbf.emit($$->llvm_name + " = " + $1->label);
        if($$->type == "BOOL")
        {
             string compare_reg = rgs.freshVar("bool_cmp_reg");
             cbf.emit(compare_reg + " = icmp eq i32 1, " + $$->llvm_name);//ziv change
            int line = cbf.emit("br i1 " + compare_reg + ", label @, label @");
            $$->trueList = cbf.makelist({line, FIRST});
            $$->falseList = cbf.makelist({line, SECOND});
        }

    }
    | NUM {
        $$ = new token_att(); 
        $$->type= $1->type; 
        $$->type = $1->type;
        $$->name = $1->name;
        $$->llvm_name = $1->strVal;
        $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
        $$->startLabel = cbf.genLabel("NUM_start");

        }
    | NUM B {if(byteTooLarge($1->intVal)) {errorByteTooLarge(yylineno, $1->strVal);}
          $$ = new token_att();
          $$->name = $1->name;
          $$->type= $2->type;
          $$->llvm_name = $1->strVal;
          $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
          $$->startLabel = cbf.genLabel("NUM_B_start");
          }

    | STRING 
    {   $$ = new token_att();
        $$->type=$1->type;
        $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
        $$->startLabel = cbf.genLabel("STRING_start");
        string global_var = rgs.freshVar(".g_ig_", true);
        $$->llvm_name = rgs.freshVar("llvm_reg");
        string str($1->strVal);
        str = str.substr(1, str.length() - 2);
        $$->name = str;
        int len = strlen($$->name.data()) + 1;
        cbf.emitGlobal(global_var + " = constant [" + to_string(str.length() + 1) + " x i8] c\"" + str + "\\00\"");
        cbf.emit($$->llvm_name + " = getelementptr ["+to_string(len)+" x i8], ["+to_string(len)+" x i8]* "+(global_var)+", i32 0, i32 0"); 
    }
    | TRUE {
        $$ = new token_att();
        $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
        $$->startLabel = cbf.genLabel("start_label_true");    
        $$->type = "BOOL";
        int true_line = cbf.emit("br label @");
        int false_line = cbf.emit("br label @");
        $$->trueList = cbf.makelist({true_line, FIRST});
        $$->falseList = cbf.makelist({false_line, FIRST});
        $$->llvm_name = VAR_EMPTY_STR;
        }
    | FALSE {
        $$ = new token_att();
        $$->jumpList = cbf.makelist({cbf.emit("br label @"), FIRST});
        $$->startLabel = cbf.genLabel("start_label_false");
        $$->type = $1->type;
        int false_line = cbf.emit("br label @");
        int true_line = cbf.emit("br label @");
        $$->trueList = cbf.makelist({true_line, FIRST});
        $$->falseList = cbf.makelist({false_line, FIRST});
        $$->llvm_name = VAR_EMPTY_STR;
        }
    | NOT Exp { 
        if(notBool($2->type)) errorMismatch(yylineno); 
            $$ = new token_att();
            $$->jumpList = $2->jumpList;
            $$->startLabel = $2->startLabel;
            $$->type = $2->type;
            $$->trueList = $2->falseList;
            $$->falseList = $2->trueList;            
            $$->llvm_name = string(VAR_EMPTY_STR);
            }
    | Exp AND 
    {
        if(notBool($1->type)) errorMismatch(yylineno);
        string label = cbf.genLabel();
        cbf.bpatch($1->trueList, label);
    }
     Exp 
    {   $$ = new token_att();
        if(notBool($4->type)) errorMismatch(yylineno);
        resolve_jump_to_next_line($4); 
        $$->jumpList =   $1->jumpList;
        $$->startLabel = $1->startLabel;
        $$->type = "BOOL";
        $$->trueList =   $4->trueList;
        $$->falseList = cbf.merge($1->falseList, $4->falseList);
        $$->llvm_name = VAR_EMPTY_STR;
        }
    | Exp OR 
    {

        if(notBool($1->type)) errorMismatch(yylineno);
        string label = cbf.genLabel("exp_or");
        cbf.bpatch($1->falseList, label);
    }  Exp 
    {    

        if(notBool($4->type)) errorMismatch(yylineno);
        resolve_jump_to_next_line($4);
        $$->jumpList = $1->jumpList;
        $$->startLabel = $1->startLabel;
        $$->type = "BOOL";
        $$->trueList = cbf.merge($1->trueList, $4->trueList);
        $$->falseList = $4->falseList;
        $$->llvm_name = VAR_EMPTY_STR;
    }
    | Exp EQ_RELOP Exp %prec EQ_RELOP { 
        if(notIntOrByte($1->type,$3->type)) {errorMismatch(yylineno);} 
        $$ = new token_att();
        $$->type = "BOOL";
        resolve_jump_to_next_line($3);
        $$->jumpList = $1->jumpList;
        $$->startLabel = $1->startLabel;
        std::string branch_str = rgs.freshVar("branch");
        //need to put it inside functions
        string reg1;
        string reg2;
        reg1 = $1->llvm_name;
        reg2 = $3->llvm_name;
        cbf.emit(branch_str + " = icmp " + opcode_to_cmd($2->name, $1->type) + " i32 " + reg1 + ", " + reg2);
        int branch_location = cbf.emit("br i1 " + branch_str + ", label @, label @");
        $$->trueList = cbf.makelist({branch_location, FIRST});
        $$->falseList = cbf.makelist({branch_location, SECOND});
        $$->llvm_name = string(VAR_EMPTY_STR);
 
        }
    | Exp RE_RELOP Exp %prec RE_RELOP { 
        if(notIntOrByte($1->type,$3->type)) {errorMismatch(yylineno);} 
        $$ = new token_att();
        resolve_jump_to_next_line($3);
        $$->jumpList = $1->jumpList;
        $$->startLabel = $1->startLabel;
        $$->type = "BOOL";
        std::string branch_str = rgs.freshVar("branch");
        string reg1;
        string reg2;
        reg1 = $1->llvm_name;
        reg2 = $3->llvm_name;
        cbf.emit(branch_str + " = icmp " + opcode_to_cmd($2->name, $1->type) + " i32 " + reg1 + ", " + reg2);
        int branch_location = cbf.emit("br i1 " + branch_str + ", label @, label @");
        $$->trueList = cbf.makelist({branch_location, FIRST});
        $$->falseList = cbf.makelist({branch_location, SECOND});
        $$->llvm_name = VAR_EMPTY_STR; 
        }

    | LPAREN Type RPAREN Exp {   
        
        if(notIntOrByte($2->type,$4->type)) 
        {
            errorMismatch(yylineno);
        }
        $$ = new token_att();
        $$->type = $2->type;
        $$->llvm_name = rgs.freshVar("llvm_reg");
        $$->name = $4->name;
        $$->jumpList = $4->jumpList;
        $$->startLabel = $4->startLabel;
        cbf.emit($$->llvm_name + " = and i32 "+ $4->llvm_name +", 255");
        }
    ;

%%

bool notBool(string type)
{
    return type!="BOOL";
}

bool byteTooLarge(int value)
{
    return value > 255;

}
bool typesDontMatch( string LHS_type,  string RHS_type)
{
    if ((LHS_type!=RHS_type) && ( (LHS_type!="INT") || (RHS_type!="BYTE") ) )
    {
        return true;
    }
    else
    {
    return false;
    }
}

bool notIntOrByte( string converter_type,  string converted_type)
{
    
    if((converter_type=="INT" && converted_type=="BYTE")
         ||(converter_type=="BYTE" && converted_type=="INT")
         ||(converter_type=="INT" && converted_type=="INT")
         ||(converter_type=="BYTE" && converted_type=="BYTE"))
         {
            return false;
         }
    return true;
}

bool isVoid()
{
    string func_ret_type = _stack.getCurrentfunctionreturnType();
    return strcmp(func_ret_type.data(),"VOID")==0;
}
string biggerType(string first, string second)
{

    return (second=="BYTE")? first : second;
}

int main()
{
    return yyparse();
}

void yyerror( const char*  s ) 
{
    errorSyn(yylineno);
}